        kg, state.rng_hash, state, sample_rsv, num_samples, PRNG_BEVEL_U, (disk_u), (disk_v));2$        kg, uint(state.rng_hash), state, int(sample_rsv), int(num_samples), int(PRNG_BEVEL_U), (disk_u), (disk_v));
<~
    /* Create ray. */
    Ray *ray = &isect.ray;
    ray->P = sd->P + disk_N * disk_height + disk_P;
    ray->D = -disk_N;
    ray->t = 2.0f * disk_height;
    ray->dP = sd->dP;
    ray->dD = differential3_zero();
    ray->time = sd->time;

    /* Intersect with the same object. if multiple intersections are found it
     * will use at most LOCAL_MAX_HITS hits, a random subset of all hits. */
    scene_intersect_local(kg, ray, &isect, sd->object, &lcg_state, LOCAL_MAX_HITS);

    int num_eval_hits = min(isect.num_hits, LOCAL_MAX_HITS);

    for (int hit = 0; hit < num_eval_hits; hit++) {
      /* Quickly retrieve P and Ng without setting up ShaderData. */
      float3 hit_P;
      if (sd->type & PRIMITIVE_TRIANGLE) {
        hit_P = triangle_refine_local(kg, sd, &isect.hits[hit], ray);
      }
#  ifdef __OBJECT_MOTION__
      else if (sd->type & PRIMITIVE_MOTION_TRIANGLE) {
        float3 verts[3];
        motion_triangle_vertices(
            kg, sd->object, kernel_tex_fetch(__prim_index, isect.hits[hit].prim), sd->time, verts);
        hit_P = motion_triangle_refine_local(kg, sd, &isect.hits[hit], ray, verts);
      }
#  endif /* __OBJECT_MOTION__ */
~>
<~
    /* Create ray. */
    isect.ray.P = sd.P + disk_N * disk_height + disk_P;
    isect.ray.D = -disk_N;
    isect.ray.t = 2.0f * disk_height;
    isect.ray.dP = sd.dP;
    isect.ray.dD = differential3_zero();
    isect.ray.time = sd.time;

    /* Intersect with the same object. if multiple intersections are found it
     * will use at most LOCAL_MAX_HITS hits, a random subset of all hits. */
    /* TODO BVH_LOCAL*/ 
    //scene_intersect_local(kg, isect.ray, (isect), int(sd.object), uint(lcg_state), int(LOCAL_MAX_HITS));

    int num_eval_hits = min(isect.num_hits, LOCAL_MAX_HITS);

    for (int hit = 0; hit < num_eval_hits; hit++) {
      /* Quickly retrieve P and Ng without setting up ShaderData. */
      float3 hit_P;
      if (sd->type & PRIMITIVE_TRIANGLE) {
        hit_P = triangle_refine_local(kg, sd, isect.hits[hit], isect.ray);
      }
#  ifdef __OBJECT_MOTION__
      else if (sd->type & PRIMITIVE_MOTION_TRIANGLE) {
        float3 verts[3];
        motion_triangle_vertices(
            kg, sd->object, kernel_tex_fetch(__prim_index, isect.hits[hit].prim), sd->time, verts);
        hit_P = motion_triangle_refine_local(kg, sd, isect.hits[hit], isect.ray, verts);
      }
#  endif /* __OBJECT_MOTION__ */
~>
~<
      int object = (isect.hits[hit].object == OBJECT_NONE) ?
                       kernel_tex_fetch(_prim_object, isect.hits[hit].prim) :
                       isect.hits[hit].object;
      int object_flag = kernel_tex_fetch(_object_flag, object);
>~
~<
      int object = (isect.hits[hit].object == OBJECT_NONE) ?
                       int(kernel_tex_fetch(_prim_object, isect.hits[hit].prim) ):
                       int(isect.hits[hit].object);
      int object_flag = int(kernel_tex_fetch(_object_flag, object));  
>~
~<
      int prim = kernel_tex_fetch(_prim_index, isect.hits[hit].prim);
      int shader = kernel_tex_fetch(_tri_shader, prim);
>~
~<
      int prim = int(kernel_tex_fetch(_prim_index, isect.hits[hit].prim));
      int shader = int(kernel_tex_fetch(_tri_shader, prim));
>~
  return is_zero(N) ? sd.N : (sd.flag & SD_BACKFACING) ? -N : N;2$  return is_zero(N) ? sd.N : bool(sd.flag & SD_BACKFACING) ? -N : N;
float3 bevel_N = svm_bevel(kg, sd, state, radius, num_samples);2$float3 bevel_N = svm_bevel(kg, sd, state, radius, int(num_samples));


